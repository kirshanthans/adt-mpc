#include<obliv.oh>

#include"test.h"

typedef struct _Node{
  obliv int data;
  struct _Node * next;
}Node;

obliv int dotRec(obliv int * v1, obliv int * v2, int i, int size)
{
  if (i >= size){
    obliv int ret = 0;
    return ret;
  }
  return v1[i]*v2[i] + dotRec(v1+1, v2+1, i+1, size);
}

void dotProd(void *args){
  protocolIO *io = args;
  int v1Size = ocBroadcastInt(io->input.size, 1);
  int v2Size = ocBroadcastInt(io->input.size, 2);
  
  obliv int* v1 = malloc(sizeof(obliv int) * v1Size);
  obliv int* v2 = malloc(sizeof(obliv int) * v2Size);

  feedOblivIntArray(v1, io->input.arr, v1Size, 1);
  feedOblivIntArray(v2, io->input.arr, v2Size, 2);

  int vMinSize = v1Size < v2Size ? v1Size : v2Size;

  // obliv int sum = dotRec(v1, v2, 0, vMinSize);
  
  obliv int sum = 0;
  for(int i=0; i<vMinSize; i++){
    sum += v1[i]*v2[i];
  }
  
  revealOblivInt(&(io->result), sum, 0);
  
}
